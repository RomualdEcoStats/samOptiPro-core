% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnostics.R
\name{run_structure_and_hmc_test}
\alias{run_structure_and_hmc_test}
\title{Run structural diagnostics and (optional) HMC/NUTS smoke test}
\usage{
run_structure_and_hmc_test(
  build_fn,
  include_data = FALSE,
  try_hmc = TRUE,
  niter = 50L,
  nburnin = 10L,
  seed = 1L
)
}
\arguments{
\item{build_fn}{A zero-arg function returning a list with at least
\code{model} (\code{nimbleModel}); optional elements: \code{cmodel}, \code{monitors},
\code{code_text} (or \code{code}) used to strengthen non-diff detection.}

\item{include_data}{Logical; include data nodes in counts and scans. Default \code{FALSE}.}

\item{try_hmc}{Logical; if \code{TRUE}, attempt a brief HMC/NUTS run. Default \code{TRUE}.}

\item{niter}{Integer; total iterations for the HMC test. Default \code{50L}.}

\item{nburnin}{Integer; burn-in for the HMC test. Default \code{10L}.}

\item{seed}{Integer; RNG seed for the HMC run. Default \code{1L}.}
}
\value{
An invisible list with components:
\itemize{
\item \code{diag}: list with \code{nodes} (data.frame of node metadata and HMC showstopper tags),
\code{nondiff_signals}, \code{code_scan}, \code{hmc_globally_ok}.
\item \code{hmc}: list describing the HMC trial (\code{ok}, \code{error}, \code{details}).
}
}
\description{
Inspects a NIMBLE model produced by \code{build_fn()} to:
\itemize{
\item count stochastic vs. deterministic nodes (optionally including data),
\item parse the model code to detect non-differentiable functions and BUGS-style truncation,
\item rebuild a per-node table with distribution, support, and bounds,
\item tag \strong{HMC showstoppers} (e.g., discrete latents, simplex constraints, truncation,
non-differentiable deterministic ops feeding latents),
\item optionally attempt a short HMC/NUTS run (via \pkg{nimbleHMC}) to check practical feasibility.
}
}
\details{
Compared to \code{diagnose_model_structure()}, this function does not filter nodes by
ignore patterns or explicit removals and does not compute dependency fan-out.
Its emphasis is \emph{HMC suitability} rather than structural load.
}
\examples{
\dontrun{
out <- run_structure_and_hmc_test(my_builder, include_data = FALSE, try_hmc = TRUE)
if (!out$hmc$ok) message("HMC not feasible: ", out$hmc$error)
}
}
